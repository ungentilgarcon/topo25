import { Meteor } from 'meteor/meteor'
import { Topograms, Nodes, Edges } from '/imports/api/collections.js'

function slugify(str) {
  return (str || '')
    .toString()
    .trim()
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
}

async function seedIfEmpty() {
  // Only seed in development unless explicitly enabled
  const allow = Meteor.isDevelopment || process.env.METEOR_SEED === '1'
  const skip = process.env.METEOR_SKIP_SEED === '1'
  if (!allow || skip) return

  const existing = Topograms.find().count()
  if (existing > 0) return

  const now = new Date()
  const variant = (process.env.SEED_VARIANT || '').toLowerCase() // '', 'geo', 'time', 'large', 'tour'
  const title = variant ? `Sample Topogram (${variant})` : 'Sample Topogram'
  const topogramId = Topograms.insert({
    title,
    slug: slugify(title),
    sharedPublic: true,
    description: 'Autogenerated seed data for local testing.',
    createdAt: now
  })

  // Create a few nodes with stable cytoscape ids so edges can reference them
  let nodeDefs = [
    { id: 'node-a', name: 'Alpha', x: 80, y: 120, group: 'person', color: '#4f46e5' },
    { id: 'node-b', name: 'Bravo', x: 220, y: 80, group: 'place', color: '#16a34a' },
    { id: 'node-c', name: 'Charlie', x: 180, y: 210, group: 'event', color: '#dc2626' }
  ]

  if (variant === 'geo') {
    nodeDefs = nodeDefs.map((n, i) => ({ ...n, lat: 48.85 + i * 0.01, lng: 2.34 + i * 0.01 }))
  }
  if (variant === 'time') {
    nodeDefs = nodeDefs.map((n, i) => ({ ...n, start: new Date(now.getTime() + i * 86400000), end: new Date(now.getTime() + (i + 3) * 86400000) }))
  }
  if (variant === 'tour') {
    nodeDefs = [
      { id: 'paris',   name: 'Paris',   x: 60,  y: 120, group: 'city', color: '#2563eb', lat: 48.8566, lng: 2.3522 },
      { id: 'berlin',  name: 'Berlin',  x: 180, y: 80,  group: 'city', color: '#16a34a', lat: 52.52,   lng: 13.405 },
      { id: 'prague',  name: 'Prague',  x: 240, y: 160, group: 'city', color: '#dc2626', lat: 50.0755, lng: 14.4378 },
      { id: 'vienna',  name: 'Vienna',  x: 300, y: 220, group: 'city', color: '#9333ea', lat: 48.2082, lng: 16.3738 }
    ]
  }
  if (variant === 'large') {
    const base = nodeDefs.slice()
    nodeDefs = []
    const count = Number(process.env.SEED_LARGE_NODES || 50)
    for (let i = 0; i < count; i++) {
      const b = base[i % base.length]
      nodeDefs.push({ id: `node-${i}`, name: `${b.name} ${i}`, x: (i * 27) % 300, y: (i * 43) % 300, group: b.group, color: b.color })
    }
  }

  for (const n of nodeDefs) {
    Nodes.insert({
      topogramId,
      data: {
        id: n.id,
        name: n.name,
        group: n.group,
        color: n.color,
        weight: Math.floor(Math.random() * 5) + 1,
        ...(n.lat != null ? { lat: n.lat } : {}),
        ...(n.lng != null ? { lng: n.lng } : {}),
        ...(n.start ? { start: n.start } : {}),
        ...(n.end ? { end: n.end } : {})
      },
      position: { x: n.x, y: n.y },
      group: 'nodes',
      createdAt: now
    })
  }

  // Connect nodes with simple edges
  let edgeDefs = [
    { id: 'edge-ab', source: 'node-a', target: 'node-b', name: 'knows' },
    { id: 'edge-bc', source: 'node-b', target: 'node-c', name: 'leads to' },
    { id: 'edge-ca', source: 'node-c', target: 'node-a', name: 'relates' }
  ]

  if (variant === 'large') {
    const m = nodeDefs.length
    edgeDefs = []
    for (let i = 0; i < m; i++) {
      const a = `node-${i}`
      const b = `node-${(i + 1) % m}`
      edgeDefs.push({ id: `edge-${i}-${(i + 1) % m}`, source: a, target: b, name: 'link' })
    }
  }
  if (variant === 'tour') {
    // Follow the order in nodeDefs to create a route
    edgeDefs = []
    for (let i = 0; i < nodeDefs.length - 1; i++) {
      const a = nodeDefs[i].id
      const b = nodeDefs[i + 1].id
      edgeDefs.push({ id: `edge-${a}-${b}`, source: a, target: b, name: 'route' })
    }
  }

  for (const e of edgeDefs) {
    Edges.insert({
      topogramId,
      data: {
        id: e.id,
        source: e.source,
        target: e.target,
        name: e.name,
        weight: Math.floor(Math.random() * 3) + 1,
        ...(variant === 'time' ? { start: now, end: new Date(now.getTime() + 86400000) } : {})
      },
      group: 'edges',
      createdAt: now
    })
  }

  // eslint-disable-next-line no-console
  console.log(`[seed] Inserted sample topogram (${variant || 'default'}) with ${nodeDefs.length} nodes and ${edgeDefs.length} edges`)
}

Meteor.startup(() => {
  // Fire and forget; no await to avoid blocking startup
  ;(async () => { await seedIfEmpty() })()
})
