import { Edges } from '../collections.js'
import { Meteor } from 'meteor/meteor'

import { ValidatedMethod } from 'meteor/mdg:validated-method'
import { SimpleSchema } from 'meteor/aldeed:simple-schema'

const EDGE_ID_ONLY = new SimpleSchema({
  edgeId: { type: String },
}).validator({ clean: true, filter: false })


/**
* Create a single edge
*
* @instance {ValidatedMethod}
* @param {Object} node the raw node data (generated by `MakeEdge()`)
* @return {Object} the Node object as inserted in Mongo
*/
export const edgeCreate = new ValidatedMethod({
  name: 'edge.create',
  validate: Edges.simpleSchema()
    .pick([
      'topogramId',
      'data.id',
      'data.name',
      'data.color',
      'data.group',
      'data.notes',
      'data.lat',
      'data.lng',
      'data.start',
      'data.end',
      'data.starred',
      'data.weight',
      'data.source',
      'data.target',
    ]).validator(),
  async run(edge) {
    return await Edges.insertAsync( edge )
  }
})

/**
* Delete a single edge
*
* @instance {ValidatedMethod}
* @param {String} edgeId _id of the edge to delete
* @return {Object} the Node object as removed from Mongo
*/
export const edgeDelete = new ValidatedMethod({
  name: 'edge.delete',
  validate: EDGE_ID_ONLY,
  async run({ edgeId }) {
    return await Edges.removeAsync( edgeId )
  }
})


/**
* Create multiple edges at once
*
* @instance {ValidatedMethod}
* @param {Array} edges an array of edge data
* @return {Object} the edges as inserted in Mongo
*/

// Use a minimal validator here; collection2 will validate on insert

export const edgeCreateMany = new ValidatedMethod({
  name: 'edge.createMany',
  validate: new SimpleSchema({
    'topogramId': { type: String },
    'edges': { type: Array, minCount: 1 },
    'edges.$': { type: Object, blackbox: true }
  }).validator(),
  async run({ topogramId, edges }) {
    const ok = edges.map( e =>  ({ ...e, topogramId }) )
    const ids = []
    for (const e of ok) {
      // eslint-disable-next-line no-await-in-loop
      ids.push(await Edges.insertAsync(e))
    }
    return ids
  }
})

/**
* Update edge properties
*
* @instance {ValidatedMethod}
* @param {String} nodeId _id of the node to be updated
* @param {Object} data the new data to be updated
* @return {Object} the updated Edge object as returned by Mongo
*/


const edgeUpdateSchema = Edges.schema.pick([
  'data.name',
  'data.color',
  'data.group',
  'data.notes',
  'data.lat',
  'data.lng',
  'data.start',
  'data.end',
  'data.starred',
  'data.weight'
])


export const edgeUpdate = new ValidatedMethod({
  name: 'edge.update',
  validate: new SimpleSchema([
    edgeUpdateSchema,
    { 'edgeId': {
      type: String
    }
    },
    {
      'data.source': {
        type: String,
        label: 'The source of the edge',
        optional :true
      }
    },
    {
      'data.target': {
        type: String,
        label: 'The target of the edge',
        optional :true
      }
    }
  ]).validator(), // TODO :check if ID exists,
  async run( { edgeId, data }) {
    const $set = {}
    Object.keys(data).map( d=> $set['data.'+d] = data[d])
    return await Edges.updateAsync({ 'data.id': edgeId }, { $set })
  }
})

/**
* Delete multiple edges
*
* @instance {ValidatedMethod}
* @param {Array} edgesId list of edge _ids deleted
* @return {Object} the Node object as inserted in Mongo
*/

export const edgeDeleteMany = new ValidatedMethod({
  name: 'edge.deleteMany',
  validate: new SimpleSchema({
    edgeIds: { type: [String], minCount: 1 }
  }).validator(), // TODO :check if ID exists,
  async run({ edgeIds }) {
    return await Edges.removeAsync( { '_id' : { $in : edgeIds } } )
  }
})

/**
* Delete all edges in a Topogram
*
* @instance {ValidatedMethod}
* @param {String} topogramId the _id of the topogram
* @return {Object} the Edges object as inserted in Mongo
*/
export const edgeDeleteAll = new ValidatedMethod({
  name: 'edge.deleteAll',
  validate: new SimpleSchema({ 'topogramId': { type: String } }).validator(),
  // TODO :check if ID exists
  async run( topogramId ) {
    return await Edges.removeAsync(topogramId)
  }
})

Meteor.methods( {

  async batchInsertEdges( edges ) {
    const ids = []
    for (const e of edges) { ids.push(await Edges.insertAsync(e)) }
    return ids
  },

  async deleteEdge( edgeId ) {
    const edge = await Edges.findOneAsync({ 'data.id': edgeId })
    if (!edge) return 0
    return await Edges.removeAsync( edge )
  },

  async deleteEdgesByTopogramId( topogramId ) {
    return await Edges.removeAsync({ topogramId })
  }
} )
